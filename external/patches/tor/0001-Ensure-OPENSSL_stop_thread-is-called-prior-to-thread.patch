From 267b5ba876dc8012dbe497ae7d9c511c781300b1 Mon Sep 17 00:00:00 2001
From: Matthew Nelson <developer@matthewnelson.io>
Date: Sat, 12 Jul 2025 08:10:17 -0400
Subject: [PATCH 1/3] Ensure OPENSSL_stop_thread is called prior to thread exit

---
 src/lib/thread/compat_pthreads.c   | 10 +++++++++
 src/lib/thread/compat_winthreads.c | 36 ++++++++++++++++++++++++++++--
 2 files changed, 44 insertions(+), 2 deletions(-)

diff --git a/src/lib/thread/compat_pthreads.c b/src/lib/thread/compat_pthreads.c
index 61de020a2e..f0f74ed94b 100644
--- a/src/lib/thread/compat_pthreads.c
+++ b/src/lib/thread/compat_pthreads.c
@@ -11,6 +11,11 @@
  */
 
 #include "orconfig.h"
+
+#ifdef ENABLE_OPENSSL
+#include <openssl/crypto.h>
+#endif
+
 #include "lib/thread/threads.h"
 #include "lib/wallclock/timeval.h"
 #include "lib/log/log.h"
@@ -49,6 +54,11 @@ tor_pthread_helper_fn(void *_data)
   arg = data->data;
   tor_free(_data);
   func(arg);
+#ifdef ENABLE_OPENSSL
+  OPENSSL_thread_stop();
+  log_debug(LD_GENERAL, "OPENSSL_thread_stop() has been called [TID: %lu]",
+            tor_get_thread_id());
+#endif
   return NULL;
 }
 /**
diff --git a/src/lib/thread/compat_winthreads.c b/src/lib/thread/compat_winthreads.c
index f28cdcca00..f285871496 100644
--- a/src/lib/thread/compat_winthreads.c
+++ b/src/lib/thread/compat_winthreads.c
@@ -27,6 +27,10 @@
 #error "winver too low"
 #endif
 
+#ifdef ENABLE_OPENSSL
+#include <openssl/crypto.h>
+#endif
+
 #include <windows.h>
 #include <process.h>
 #include <time.h>
@@ -36,6 +40,28 @@
 #include "lib/log/util_bug.h"
 #include "lib/log/win32err.h"
 
+typedef struct tor_winthread_data_t {
+  void (*func)(void *);
+  void *data;
+} tor_winthread_data_t;
+
+static void *
+tor_winthread_helper_fn(void *_data)
+{
+  tor_winthread_data_t *data = _data;
+  void (*func)(void*);
+  void *arg;
+  func = data->func;
+  arg = data->data;
+  tor_free(_data);
+  func(arg);
+#ifdef ENABLE_OPENSSL
+  OPENSSL_thread_stop();
+  log_debug(LD_GENERAL, "OPENSSL_thread_stop() has been called [TID: %lu]",
+            tor_get_thread_id());
+#endif
+  return NULL;
+}
 /** Minimalist interface to run a void function in the background.  On
  * Unix calls fork, on win32 calls beginthread.  Returns -1 on failure.
  * func should not return, but rather should call spawn_exit.
@@ -49,9 +75,15 @@ int
 spawn_func(void (*func)(void *), void *data)
 {
   int rv;
-  rv = (int)_beginthread(func, 0, data);
-  if (rv == (int)-1)
+  tor_winthread_data_t *d;
+  d = tor_malloc(sizeof(tor_winthread_data_t));
+  d->data = data;
+  d->func = func;
+  rv = (int)_beginthread(tor_winthread_helper_fn, 0, d);
+  if (rv == (int)-1) {
+    tor_free(d);
     return -1;
+  }
   return 0;
 }
 
-- 
2.34.1

